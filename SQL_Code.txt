DROP TABLE futura_info;
DROP TABLE futura;
DROP TABLE customers;
DROP TABLE products;

CREATE TABLE customers (
	id SERIAL,
	name CHARACTER VARYING(100) NOT NULL,
	adress CHARACTER VARYING(100) NOT NULL,
	phone CHARACTER VARYING(12) NOT NULL,
	PRIMARY KEY(id),
	UNIQUE(name)
);

CREATE TABLE products (
	id SERIAL,
	name CHARACTER VARYING(100) NOT NULL,
	nounce INTEGER NOT NULL,
	PRIMARY KEY(id),
	UNIQUE(name)
);

CREATE TABLE futura (
	id SERIAL,
	id_customer INTEGER NOT NULL,
	date TIMESTAMP NOT NULL,
	payment_type CHARACTER VARYING(20) NOT NULL,
	prepayment BOOLEAN NOT NULL,
	sent BOOLEAN NOT NULL,
	total_sum MONEY,
	PRIMARY KEY(id),
	FOREIGN KEY (id_customer) REFERENCES customers (id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE futura_info (
	id SERIAL,
	id_futura INTEGER NOT NULL,
	id_product INTEGER NOT NULL,
	quantity INTEGER NOT NULL,
	price MONEY,
	PRIMARY KEY(id),
	FOREIGN KEY (id_futura) REFERENCES futura (id) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (id_product) REFERENCES products (id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE OR REPLACE FUNCTION upd_futura() RETURNS TRIGGER AS $$
	BEGIN
		UPDATE futura SET total_sum = (SELECT sum(quantity * price) FROM 
									   	futura_info WHERE id_futura = NEW.id_futura)
			WHERE id = NEW.id_futura;
		UPDATE products SET nounce = nounce - NEW.quantity
			WHERE id = NEW.id_product;
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER upd_futura 
AFTER INSERT OR UPDATE OR DELETE ON futura_info 
	FOR EACH ROW EXECUTE PROCEDURE upd_futura();
